logging:
  level:
    com.spring.boot: debug

# 限流控制
# https://resilience4j.readme.io/docs/ratelimiter
resilience4j.ratelimiter:
  configs:
    default: # 默认配置
      registerHealthIndicator: false
      limitForPeriod: 3
      limitRefreshPeriod: 1s
      timeoutDuration: 0
      eventConsumerBufferSize: 100
  instances: # 根据实例配置
    backendA:
      baseConfig: default
    backendB:
      limitForPeriod: 1 # 每时间单位可执行处理数
      limitRefreshPeriod: 10000ms # 单位时间（毫秒）
      timeoutDuration: 3s # 获取令牌的等待超时时间, 超时为获取到令牌将抛出异常
  limiters: # 根据限流器配置
    backendC:
      limitForPeriod: 3 # 每时间单位可执行处理数
      limitRefreshPeriod: 10000ms # 单位时间（毫秒）
      timeoutDuration: 5s # 获取令牌的等待超时时间, 超时为获取到令牌将抛出异常

# 异步超时控制
# https://resilience4j.readme.io/docs/timeout
resilience4j.timelimiter:
  configs:
    default:
      cancelRunningFuture: false
      timeoutDuration: 2s
  instances:
    backendA:
      baseConfig: default
    backendB:
      baseConfig: default

# 熔断控制
# https://resilience4j.readme.io/docs/circuitbreaker
resilience4j.circuitbreaker:
#  configs:
#    default:
#      registerHealthIndicator: true
#      slidingWindowType: COUNT_BASED # 滑动窗口类型，熔断器关闭时用来记录调用结果，取值有基于计数器(COUNT_BASED)和基于时间(TIME_BASED)。
#      slidingWindowSize: 10 # 滑动窗口大小，熔断器关闭时用来记录调用结果
#      minimumNumberOfCalls: 5 # 最小调用次数
#      permittedNumberOfCallsInHalfOpenState: 3 # 熔断器处于半开状态时允许的调用次数
#      automaticTransitionFromOpenToHalfOpenEnabled: true
#      waitDurationInOpenState: 5s # 熔断器从打开状态转变为半开状态等待的时间
#      failureRateThreshold: 50 # 熔断器打开的失败率阈值(熔断器关闭状态和半开状态使用的同一个失败率阈值)
#      eventConsumerBufferSize: 10
#      recordExceptions: # 需要记录为失败的异常列表
#        - org.springframework.web.client.HttpServerErrorException
#        - java.util.concurrent.TimeoutException
#        - java.io.IOException
#      ignoreExceptions: # 需要忽略的异常列表
#        - com.spring.boot.resilience4j.exception.BusinessException
#    shared:
#      slidingWindowSize: 100
#      permittedNumberOfCallsInHalfOpenState: 30
#      waitDurationInOpenState: 1s
#      failureRateThreshold: 50
#      eventConsumerBufferSize: 10
#      ignoreExceptions:
#        - com.spring.boot.resilience4j.exception.BusinessException
  instances:
#    backendA:
#      baseConfig: default
    backendB:
      registerHealthIndicator: true
      slidingWindowType: TIME_BASED # 滑动窗口类型，熔断器关闭时用来记录调用结果，取值有基于计数器(COUNT_BASED)和基于时间(TIME_BASED)。
      slidingWindowSize: 3 # 3秒内
      minimumNumberOfCalls: 5 # 最少调用5次
      permittedNumberOfCallsInHalfOpenState: 1 # 熔断器在半打开状态允许调用1次
      waitDurationInOpenState: 5s # 熔断器打开后经过5秒转换为半打开状态
      failureRateThreshold: 60 # 如果有50%调用失败，则打开熔断器，按全部调用次数计算
      eventConsumerBufferSize: 10
      recordFailurePredicate: com.spring.boot.resilience4j.exception.RecordFailurePredicate
#  backends:
#    backendA:
#      ringBufferSizeInClosedState: 5 # 熔断器关闭状态的缓冲区大小，不会限制线程的并发量，在熔断器发生状态转换前所有请求都会调用后端服务
#      ringBufferSizeInHalfOpenState: 3 # 熔断器半开状态的缓冲区大小，会限制线程的并发量，例如缓冲区为10则每次只会允许10个请求调用后端服务
#      waitDurationInOpenState: 5000 # 熔断器从打开状态转变为半开状态等待的时间
#      failureRateThreshold: 60 # 熔断器打开的失败率阈值(熔断器关闭状态和半开状态使用的同一个失败率阈值)
#      eventConsumerBufferSize: 10 # 事件缓冲区大小
#      automaticTransitionFromOpenToHalfOpenEnabled: false # 如果置为true，当waitDurationInOpenState时间结束会自动由打开变为半开，若置为false，则需要一个请求进入来触发熔断器状态转换
#    backendB:
#      ringBufferSizeInClosedState: 5 # 熔断器关闭状态的缓冲区大小，不会限制线程的并发量，在熔断器发生状态转换前所有请求都会调用后端服务
#      ringBufferSizeInHalfOpenState: 3 # 熔断器半开状态的缓冲区大小，会限制线程的并发量，例如缓冲区为10则每次只会允许10个请求调用后端服务
#      waitDurationInOpenState: 5000 # 熔断器从打开状态转变为半开状态等待的时间
#      failureRateThreshold: 60 # 熔断器打开的失败率阈值(熔断器关闭状态和半开状态使用的同一个失败率阈值)
#      eventConsumerBufferSize: 10 # 事件缓冲区大小
#      automaticTransitionFromOpenToHalfOpenEnabled: false # 如果置为true，当waitDurationInOpenState时间结束会自动由打开变为半开，若置为false，则需要一个请求进入来触发熔断器状态转换

# 并发访问控制
# https://resilience4j.readme.io/docs/bulkhead
resilience4j.bulkhead:
#  configs:
#    default:
#      maxConcurrentCalls: 100 # 可允许的最大并发线程数
  instances:
#    backendA:
#      maxConcurrentCalls: 10
    bulkheadA:
      maxWaitDuration: 10ms # 尝试进入饱和舱壁时，应阻塞线程的最长时间
      maxConcurrentCalls: 3 # 并发处理请求数量

resilience4j.thread-pool-bulkhead:
  configs:
    default:
      maxThreadPoolSize: 4
      coreThreadPoolSize: 2
      queueCapacity: 2
  instances:
    backendA:
      baseConfig: default
    backendB:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

# 重试控制
resilience4j.retry:
  configs:
    default:
      maxAttempts: 3 # 最多重试次数
      waitDuration: 3s # 重试间隔时间
      retryExceptions: # 以下异常进行重试
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
      ignoreExceptions:
        - com.spring.boot.resilience4j.exception.BusinessException
  instances:
    backendA:
      baseConfig: default
    backendB:
      baseConfig: default

