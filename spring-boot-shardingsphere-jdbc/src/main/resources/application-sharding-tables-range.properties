# 分表
spring.shardingsphere.datasource.names=ds0

spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=.PassW0rd,321


# t_order_create_time_2020_q1
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds0.t_order_create_time_$->{2020..2020}_q$->{1..2}
# 标准分片策略
# 对应 StandardShardingStrategy。提供对 SQ L语句中的 =, >, <, >=, <=, IN 和 BETWEEN AND 的分片操作支持。
# StandardShardingStrategy 只支持单分片键，提供 PreciseShardingAlgorithm 和 RangeShardingAlgorithm 两个分片算法。
# PreciseShardingAlgorithm 是必选的，用于处理 = 和 IN 的分片。
# RangeShardingAlgorithm 是可选的，用于处理 BETWEEN AND, >, <, >=, <=分片，如果不配置 RangeShardingAlgorithm，SQL 中的 BETWEEN AND 将按照全库路由处理。
# 分片键
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column=create_time
# 精确分片算法 全路径名
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.preciseAlgorithmClassName=com.spring.boot.shardingsphere.jdbc.preciseAlgorithm.CommonPreciseShardingAlgorithm
# 范围分片算法，用于BETWEEN，可选。。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.rangeAlgorithmClassName=com.spring.boot.shardingsphere.jdbc.preciseAlgorithm.CommonRangeShardingAlgorithm

spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds0.t_order_item_create_time_$->{2020..2020}_q$->{1..2}
# 分片键
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.standard.sharding-column=create_time
# 精确分片算法 全路径名
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.standard.preciseAlgorithmClassName=com.spring.boot.shardingsphere.jdbc.preciseAlgorithm.CommonPreciseShardingAlgorithm
# 范围分片算法，用于BETWEEN，可选。。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.standard.rangeAlgorithmClassName=com.spring.boot.shardingsphere.jdbc.preciseAlgorithm.CommonRangeShardingAlgorithm


spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=123

#spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_item_id
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker.id=123

#spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
#spring.shardingsphere.sharding.broadcast-tables=t_address
